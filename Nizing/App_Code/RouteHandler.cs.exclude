using Microsoft.AspNet.FriendlyUrls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Compilation;
using System.Web.Routing;
using System.Web.UI;

/// <summary>
/// Summary description for RouteHandler
/// </summary>
/// 
public static class RouteHandler
{
    public static void RegisterRoutes(RouteCollection routes)
    {
        routes.EnableFriendlyUrls();

        routes.MapPageRoute("language", "{language}/{pageName}", "~/WIP/default.aspx");
        routes.Add(new Route("{language}/{*page}", new LanguageRouteHandler()));
    }

    public class LanguageRouteHandler : IRouteHandler
    {
        public IHttpHandler GetHttpHandler(RequestContext requestContext)
        {
            string page = CheckForNullValue(requestContext.RouteData.Values["page"]);
            string virtualPath = "~/" + page;

            if (string.IsNullOrEmpty(page))
            {
                string language = CheckForNullValue(requestContext.RouteData.Values["language"]);
                string newPage = "/default";

                if (!string.IsNullOrEmpty(language))
                    newPage = "/" + language + newPage;
                HttpContext.Current.Response.Redirect(newPage, false);
                HttpContext.Current.Response.StatusCode = 301;
                HttpContext.Current.Response.End();

                //Otherwise, route to home
                //page = "home";
            }

            if (!virtualPath.Contains(".aspx"))
                virtualPath += ".aspx";

            try
            {
                return BuildManager.CreateInstanceFromVirtualPath(virtualPath, typeof(Page)) as IHttpHandler;
            }
            catch
            {
                return null;
            }
        }

        private string CheckForNullValue(object obj)
        {
            return obj == null ? "default" : obj.ToString();
        }
    }
}

